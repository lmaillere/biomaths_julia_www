---
title: "Introduction"
---
\

Ces pages proposent une introduction à la simulation d'équations différentielles avec `Julia`, centrée sur la simulation de modèles classiques en dynamique des populations.

Ces pages sont structurées comme suit :

- la section sur les [populations isolées](pop_isolees.qmd) introduit les bases en dimension 1 (modèle de Malthus, modèle logistique et effets Allee)

- la section sur les [populations exploitées](pop_exploitees.qmd) introduit les diagrammes de bifurcations (prélèvements et effets Allee, interactions insectes-oiseaux)

- la section sur les [populations en interaction](pop_interactions.qmd) introduit la dimension 2, notamment via les représentations dans l'espace d'état, et traite des interactions entre populations sous l'angle des modèles proies-prédateurs (modèle de Lotka Volterra et [modèle de Rosenzweig MacArthur](pop_interactions2.qmd))

Le site contient aussi du [matétiel supplémentaire](annexes.qmd) pour compléments plus avancés (graphiques, methodes d'intégration alternatives, équations de réaction-diffusion).

## Installation de Julia

La façon la plus simple d'installer `Julia` est d'utiliser [juliaup](https://github.com/JuliaLang/juliaup). 

Sur Linux, installez `curl` sur votre système^[`sudo apt install curl` sur Ubuntu]. Puis dans un terminal :
```{julia}
#| eval: false
curl -fsSL https://install.julialang.org | sh
```
et procédez à l'installation. 

Fermez et réouvrez votre terminal (ou rechargez votre fichier de préférences comme vous l'indique l'installateur de juliaup) pour pouvoir exécuter `Julia`.

Puis, si vous souhaitez utiliser `Julia` dans un notebook `jupyter`, installez le package `IJulia` depuis Julia comme suit^[le profil utilisé doit semble-t-il être administrateur, et si il est tout nouvellement créé un redémarrage peut s'avérer nécessaire si vous rencontrez une erreur à l'exécution de `jupyterlab()` ci-dessous]:
```{julia}
#| eval: false
julia # executer julia dans un terminal
   _       _ _(_)_     |  Documentation: https://docs.julialang.org
  (_)     | (_) (_)    |
   _ _   _| |_  __ _   |  Type "?" for help, "]?" for Pkg help.
  | | | | | | |/ _` |  |
  | | |_| | | | (_| |  |  Version 1.9.4 (2023-11-14)
 _/ |\__'_|_|_|\__'_|  |  Official https://julialang.org/ release
|__/                   |

julia> ]  # package mode
(@v1.9) pkg> add IJulia 
```



Si vous avez déjà `jupyterlab` installé, un noyau `Julia` est ensuite disponible. Sinon toujours depuis Julia :
```{julia}
#| eval: false
julia> using IJulia # hit backspace first to exit package mode
julia> jupyterlab()
```
vous permettra d'installer (via une installation de miniconda) et de démarrer `jupyterlab`. 

`Julia` a aussi un système de notebook propre `Pluto.jl`:
```{julia}
#| eval: false
julia> ]   # package mode
(@v1.9) pkg> add Pluto
julia> using Pluto  # hit backspace first to exit package mode
```

Enfin, une [extension `Julia`](https://www.julia-vscode.org/docs/stable/setup/) est disponible pour VScode/VScodium.

[Allons-y !](pop_isolees.qmd)