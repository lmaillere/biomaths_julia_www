---
title: "Populations en interaction (2)"
---


```{julia}
using DifferentialEquations, DataFrames

# conditions initiales
x0 = 1.0
y0 = 1.95
etat0 = [x0, y0]

# paramètres
r = 1.0
c = 1.0
b = 1.0
m = 1.0
par_lovo = [r, c, b, m]

# integration plus longue
tspan = (0.0, 30.0)
tstep = .01

# définition du modèle
function lovo(u, par, t)
    r, c, b, m = par
    x = u[1]
    y = u[2]
    dx = r*x - c*x*y
    dy = b*x*y - m*y
    [dx, dy]
end

# problème
prob_lovo = ODEProblem(lovo, etat0, tspan, par_lovo, saveat = tstep)
# intégration
sol_lovo = solve(prob_lovo, reltol = 1e-6)
# dataframe
sol_lovo = DataFrame(sol_lovo)
rename!(sol_lovo, :timestamp => :time, :value1 => :x, :value2 => :y)
```

```{julia}
function int_prem(x, y, par = par_lovo)
      r, c, b, m = par
      -r*log(y) + c*y - m*log(x) + b*x
end
```

```{julia}
#| output: true
using GLMakie

xsurf = .2: .1: 3
ysurf = .2:.1: 3
zsurf = [int_prem(x, y, par_lovo) for x in xsurf, y in ysurf]

surface(xsurf, ysurf, zsurf, 
        axis = (type=Axis3,xlabel = "proies \$x\$",
        ylabel = "prédateurs \$y\$"))
```
