---
title: "Mon premier module"
---

## Module `RmaMod.jl`

Nous exploitons le code produit pour simuler de façon efficace le modèle de Rosenzweig MacArthur (cf. cette [page](annexe_swift_rma.qmd)) pour générer un module (essentiellement un ensemble d'objets et de fonctions qui peuvent être utilisés par d'autres programmes).

Une fois le code entièrement sous forme de `struct` et de `function`, la création du module est très simple. On place le module dans un fichier `RmaMod.jl` avec l'architecture suivante :
```{julia}
#| eval: false
# ce code n'est pas exécuté dans cette cellule pour ne pas interférer
# avec le module que nous importons après
"""
some help regarding the module...
"""
module RmaMod

# import required packages, e.g.
using StaticArrays

# put structs help and definition, e.g.:
"""
some help for IniV struct
"""
@kwdef struct IniV
    x0::Float64 = 1.0
    y0::Float64 = 1.95
    u0::SVector{2, Float64} = SVector(x0, y0)
end

# put functions help and definition, e.g.:
"""
some help for logistic function
"""
function logistic(x::Real, p::ParRma)
    (; r, K) = p    # deconstruct/get r and K from p
    return r*x*(1-x/K)
end

# export what you want other programs to know when importing through `using`
export IniV, logistic

end
```

Le *vrai* fichier `RmaMod.jl` définissant le module `RmaMod` est disponible [ici](src/RmaMod.jl).

## Utilisation du module

Pour utiliser le module contenu dans le fichier `RmaMod.jl`, nous incluons ce fichier (il est dans le répertoire `./src/` ici) et l'importons avec `using` :

```{julia}
#| output: true
include("./src/RmaMod.jl")
using .RmaMod: IniV # I shouldn't need to explicitly give it

iniv = IniV()
```

Le module exporte:

- les `structs` : `IniV` (conditions initiales), `ParRma` (paramètres du modèle), `ParTime` (paramètres de temps),
- les fonctions : `plot_rma()` et `plot_bif_rma()`,

comme nous le confirme l'aide du module.
```{julia}
#| output: true
?RmaMod
```
\

On peut obtenir de l'aide sur ces fonctions (si le module a bien rempli ses docstrings):

```{julia}
#| output: true
?RmaMod.plot_rma    # normalement seul ?plot_rma fonctionne
```

## Simulation des dynamiques

```{julia}
#| output: true
using .RmaMod

iniv = RmaMod.IniV()
```

## Diagramme de bifurcations
