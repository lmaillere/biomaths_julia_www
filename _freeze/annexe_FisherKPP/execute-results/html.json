{
  "hash": "a51e2f0f20b21fc3131ce985c5819713",
  "result": {
    "markdown": "---\ntitle: Fisher KPP with Julia\n---\n\n\n\nThis implementation of numerical solve of a reaction diffusion equation is based on the [presentation](https://www.youtube.com/watch?v=8gLhaWRYvfQ) of the package `MethodOfLines.jl` at JuliaCon 2022 by A. Jones.\n\n## Fisher KPP equation\n\nThe Fisher KPP equation (Fisher's version) reads (@fisher1937, @Kolmogorov1937):\n\n$$\n\\frac{\\partial u}{\\partial t} = ru\\left(1-u\\right) + D \\frac{\\partial^2 u}{\\partial x^2},\n$$\n\nwith $u(t,x)$ the population density at time $t$ and position $x$ (scaled to the local carrying capacity $K$), $r$ the intrinsic growth rate of the population, and $D$ the diffusion coefficient.\n\n## Packages\n\nLet us first import the packages used for the simulation:\n\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\nusing MethodOfLines,\n      ModelingToolkit,\n      DomainSets,\n      OrdinaryDiffEq,\n      Plots,\n      LaTeXStrings\n```\n:::\n\n\n## Model definition\n\n`MethodsOfLines.jl` makes use of `ModelingToolkit.jl` to symbolically define the model to integrate.\n\nLet us first define the time and space parameters:\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\n@parameters t x\n```\n:::\n\n\nThe model parameters:\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\n@parameters r D\n```\n:::\n\n\nNow the variable $u(t,x)$:\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\n@variables u(..)\n```\n:::\n\n\nAnd finally the derivatives:\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\nDt = Differential(t)\nDx = Differential(x)\nDxx = Differential(x)^2\n```\n:::\n\n\nWe can now define the model symbolically through:\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\neq = Dt(u(t, x)) ~ r * u(t,x) * (1-u(t,x)) + D * Dxx(u(t,x))\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n$$ \\begin{equation}\n\\frac{\\mathrm{d}}{\\mathrm{d}t} u\\left( t, x \\right) = D \\frac{\\mathrm{d}^{2}}{\\mathrm{d}x^{2}} u\\left( t, x \\right) + r \\left( 1 - u\\left( t, x \\right) \\right) u\\left( t, x \\right)\n\\end{equation}\n $$\n:::\n:::\n\n\n## Domains of integration\n\nLet us introduce some parameters for space and time domains:\n\n::: {.cell execution_count=7}\n``` {.julia .cell-code}\nx_max = 30.0\nt_max = 14.0\n```\n:::\n\n\nAnd the domains of integration:\n\n::: {.cell execution_count=8}\n``` {.julia .cell-code}\ndomain = [x ∈ Interval(0.0, x_max),\n          t ∈ Interval(0.0, t_max)]\n```\n:::\n\n\nWe also introduce (initial and) boundary conditions:\n\n::: {.cell execution_count=9}\n``` {.julia .cell-code}\nic_bc = [u(0.0, x) ~ 0.0,\n         u(t, 0.0) ~ 1.0,\n         u(t, x_max) ~ 0.0]\n```\n:::\n\n\n## Simulation\n\nWe define the model to be integrated as a `PDESystem`, from the equation `eq`, the initial and boundary conditions `ic_bc`, the domains of integration `domain`, the time and space parameters `t` and `x`, the solution we want to retrieve `u(t,x)`, and the model parameters $r$ and $D$:\n\n::: {.cell execution_count=10}\n``` {.julia .cell-code}\n@named sys = PDESystem(eq, ic_bc, domain, [t, x], [u(t,x)], [r => 1.0, D => 1.0])\n```\n:::\n\n\nWe set up the discretization of space, through `MethodOfLines.jl`:\n\n::: {.cell execution_count=11}\n``` {.julia .cell-code}\ndx = 0.1\ndiscretization = MOLFiniteDifference([x => dx], t)\n```\n:::\n\n\nAnd we set up the (ODE) problem to be integrated:\n\n::: {.cell execution_count=12}\n``` {.julia .cell-code}\nprob = discretize(sys, discretization)\n```\n:::\n\n\nAnd we finally integrate it through the `OrdinaryDiffEq.jl` solver with `Tsit5` algorithm.\n\n::: {.cell execution_count=13}\n``` {.julia .cell-code}\nsol = solve(prob, Tsit5(), saveat = .1)\n```\n:::\n\n\n## Graphical representation\n\nWe retrieve the components of the solution for easier manipulation:\n\n::: {.callout-warning}\nAt the present moment (Jan. 16 2024) the following code does not work with Julia 1.10 and `MethodOfLines` v0.10.4\nbecause of an update in a julia symbolic package, see [this post](https://discourse.julialang.org/t/methodoflines/108387/4) on Julia discourse. everything should go back to normal next update.\n:::\n\n::: {.cell execution_count=14}\n``` {.julia .cell-code}\ngridx = sol.u\ngridt = sol.t\nsolu = sol[u(t,x)]\n```\n:::\n\n\nAnd we plot the animation of the solution through time:\n\n::: {.cell execution_count=15}\n``` {.julia .cell-code}\nanim = @animate for i in eachindex(gridt)\n    plot(gridx, solu[i, :],\n         xlabel = \"position \"*L\"$x$\",\n         ylabel = \"population density \"*L\"$u$\",\n         label = L\"$u(x,t)$\",\n         title = \"t=$(gridt[i])\")\nend\n\ngif(anim, \"fisherKPP.gif\", fps = 10)\n```\n:::\n\n\n\\\n\nAnd that's it !\n\n",
    "supporting": [
      "annexe_FisherKPP_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}