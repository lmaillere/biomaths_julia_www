{
  "hash": "530003b493c12867a2ca895b1efd01c9",
  "result": {
    "markdown": "---\ntitle: \"Populations en interaction (2)\"\n---\n\n## Le modèle de Rosenzweig MacArthur {#sec-rma}\n\nNous considérons le modèle de dynamique de populations attribué à Rosenzweig et MacArthur (voir @Rosenzweig1963, @Turchin2003, @Smith2008).\n\n$$\n\\left\\{\\begin{array}{l}\n\\dot x = \\displaystyle rx\\left(1-\\frac{x}{K}\\right) - c \\frac{x}{h+x} y\\\\[.3cm]\n\\dot y = b\\displaystyle \\frac{x}{h+x} y - m y\n\\end{array}\\right.\n$$ {#eq-rma}\n\n### Dynamiques \n\nIl n'y a pas de difficulté particulière à la simulation par rapport au modèle de Lotka Volterra. \n\n::: {.cell execution_count=2}\n``` {.julia .cell-code code-fold=\"true\"}\nusing DifferentialEquations, DataFrames\n\n# conditions initiales\nx0 = 1.0\ny0 = 1.95\netat0 = [x0, y0]\n\n# paramètres\nr = 1.0\nK = 10.0 \nc = 1.0\nh = 2.0\nb = 2.0\nm = 1.0\n\npar_rma = [r, K, c, h, b, m]\n\n# temps d'integration \ntspan = (0.0, 55.0)\ntstep = .01\n\n# définition du modèle\nfunction rma(u, par, t)\n    r, K, c, h, b, m = par\n    x = u[1]\n    y = u[2]\n\n    dx = r*x*(1-x/K) - c*x/(h+x)*y\n    dy = b*x/(h+x)*y - m*y\n    \n    [dx, dy]\nend\n\n# problème\nprob_rma = ODEProblem(rma, etat0, tspan, par_rma, saveat = tstep)\n# intégration\nsol_rma = solve(prob_rma, reltol = 1e-6)\n# dataframe\nsol_rma = DataFrame(sol_rma)\nrename!(sol_rma, :timestamp => :time, :value1 => :x, :value2 => :y)\n```\n:::\n\n\nNous utiliserons ici le package de visualisation graphique `Makie.jl`^[entièrement écrit en `Julia`, présenté comme \"[le futur](https://medium.com/coffee-in-a-klein-bottle/visualizing-data-with-julia-using-makie-7685d7850f06)\" de la représentation graphique avec `Julia`. Une bonne [introduction à Makie](https://juliadatascience.io/DataVisualizationMakie).] à la place de `Plots.jl`. `Makie.jl` permet un contrôle très approfondi du graphique. Commençons par tracer les dynamiques contre le temps dans une figure simple.\n\nNous utiliserons le backend `CairoMakie` pour la visualisation en 2D. \n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\nusing CairoMakie\n```\n:::\n\n\nUn peu comme `Matplotlib` en `Python`, `Makie` définit un triplet `FigureAxisPlot` : la figure est le conteneur de (éventuellement) plusieurs systèmes d'axes qui contiennent chacun un ou plusieurs graphique. \n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\n# on crée la figure\nfig1 = Figure(backgroundcolor = :transparent,\n              resolution = (600,400),   # size\n              fontsize = 18)  \n\n# on crée un système d'axes en position [1,1] dans la figure\nax1 = Axis(fig1[1,1],\n           xlabel = \"temps\",\n           ylabel = \"densités de populations\",\n           title = \"Modèle de Rosenzweig MacArthur\")\n\n# on trace la population x contre le temps sur le système d'axe ax1\nlines!(ax1, sol_rma.time, sol_rma.x,\n       linewidth = 2,\n       linestyle = :solid,\n       label = L\"x(t)\")\n\n# population y\nlines!(ax1, sol_rma.time, sol_rma.y,\n       linewidth = 2,\n       linestyle = :solid,\n       label = L\"y(t)\")\n\n# légende\naxislegend(position = :lt)\n\n# on affiche la figure\nfig1\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n![Ma première figure avec `Makie.jl`](pop_interactions2_files/figure-html/fig-dyn-rma-output-1.svg){#fig-dyn-rma}\n:::\n:::\n\n\n### Dynamiques et plan de phase\n\nNous allons maintenant tracer un graphique plus complexe comprenant en colonne de droite les dynamiques des proies et des prédateurs sur deux lignes et en colonne de gauche le plan de phase. préparons la figure et les systèmes d'axes.\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\n# figure\nfig2 = Figure(backgroundcolor = :transparent,\n              resolution = (800,500),   # size\n              fontsize = 20,\n              font = \"CMU Serif\")  \n\n# 3 systèmes d'axes\nax21 = Axis(fig2[1,1],\n            title = \"Dynamiques\")\n\nax22 = Axis(fig2[2,1],\n            xlabel = \"temps\")\n\nax23 = Axis(fig2[:,2],\n            xlabel = \"proies\",\n            ylabel = \"prédateurs\",\n            title = \"Plan de phase\")\n\n# on agrandi un peu la deuxième colonne de la figure\ncolsize!(fig2.layout, 2, Auto(1.5))\n\n# ajout d'un titre\nsupertitle = Label(fig2[0, :], \"Modèle de Rosenzweig MacArthur\", fontsize = 30)\n# et d'un label d'axes commun à la première colonne\nsideinfo = Label(fig2[1:2, 0], \"densités de populations\", rotation = pi/2)\n\n# on affiche la figure\nfig2\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n![](pop_interactions2_files/figure-html/cell-5-output-1.svg){}\n:::\n:::\n\n\nOn rajoute les dynamiques.\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\nlines!(ax21, sol_rma.time, sol_rma.x,\n       color = Cycled(1),  # pick color 1 in the colorcycle\n       linewidth = 2,\n       linestyle = :solid,\n       label = L\"x\")\naxislegend(ax21, position = :lt, labelsize = 14)\n\nlines!(ax22, sol_rma.time, sol_rma.y,\n       color = Cycled(2),\n       linewidth = 2,\n       linestyle = :solid,\n       label = L\"y\")\naxislegend(ax22, position = :lt, labelsize = 14)\n\nhidexdecorations!(ax21, ticks = false)\n\nfig2\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n![](pop_interactions2_files/figure-html/cell-6-output-1.svg){}\n:::\n:::\n\n\nPassons maintenant au plan de phase.\n\n::: {.cell execution_count=7}\n``` {.julia .cell-code}\n# trajectoire\nlines!(ax23, sol_rma.x, sol_rma.y,\n       color = Cycled(1),\n       linewidth = 2,\n       linestyle = :solid,\n       label = L\"trajectoire $$\")\n\n# calcul des isoclines nulles\nx = LinRange(0.0, K+.1, 30)\ny = x\n\n# isoclines nulles de xdot\nnull_x_x = ones(length(y)).*0        # x = 0 isocline nulle de xdot\nnull_x_y = r./c.*(h.+x).*(1 .-x./K)  # y = f(x) isocline nulle de xdot\n\n# isoclines nulles de ydot\nnull_y_y = ones(length(y)).*0           # y = 0 isocline nulle de ydot\nnull_y_x = ones(length(y)).*m.*h./(b-m) # x = mh/(b-m) isocline nulle de ydot\n\n# tracé des isoclines nulle de x\nlines!(ax23, null_x_x, y,\n       color = Cycled(2),\n       linewidth = 2,\n       linestyle = :solid)\n\nlines!(ax23, x, null_x_y, \n       color = Cycled(2),\n       linewidth = 2,\n       linestyle = :solid,\n       label = L\"nullcline de $x$\")\n\n# tracé des isoclines nulle de y\nlines!(ax23, x, null_y_y, \n       color = Cycled(3),\n       linewidth = 2,\n       linestyle = :solid)\nlines!(ax23, null_y_x, y,\n       color = Cycled(3),\n       linewidth = 2,\n       linestyle = :solid,\n       label = L\"nullcline de $y$\")\n\n# tracé des équilibres\nscatter!(ax23, 0, 0,\n         color = Cycled(4),\n         label = L\"équilibres$$\")\nscatter!(ax23, K, 0,\n         color = Cycled(4))\n\neq_coex = [m*h/(b-m), r/c*(h+m*h/(b-m))*(1-m*h/(b-m)/K)]\n\nscatter!(ax23, eq_coex[1], eq_coex[2],\n         color = Cycled(4))\n\n# champs de vecteur\nscale = 10\nxrange = range(1, 10, length=11)  \nyrange = range(1. ,10, length=11)\n\nderx = [rma([x y], par_rma, 0)[1]/scale for x in xrange, y in yrange]\ndery = [rma([x y], par_rma, 0)[2]/scale for x in xrange, y in yrange]\n\narrows!(ax23, xrange, yrange, derx, dery, \n        color = :lightgray, \n        arrowsize = 10, \n        label = L\"vector field$$\")\n\naxislegend(ax23, position = :rt, labelsize = 14)\n\n# reduce default spacing for columns and rows\ncolgap!(fig2.layout, 20)\nrowgap!(fig2.layout, 20)\n\nfig2\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n![Une figure plus complexe avec `Makie.jl`](pop_interactions2_files/figure-html/fig-rma-pplane-output-1.svg){#fig-rma-pplane}\n:::\n:::\n\n\n### Diagramme de bifurcations\n\nPour finir ce TP, nous allons tracer le diagramme de bifurcation du modèle de Rosenzweig MacArthur $y^*$ en fonction de $K$, en identifiant les bifurcations transcritique et de Hopf vues en cours, et en estimant et représentant les extremas du cycle limite apparaissant pour $K$ grand.\n\nPour rappel, il y a 3 situations asymptotiques distinctes pour le modèle de Rosenzweig MacArthur :\n\n- si : $0<K<\\displaystyle\\frac{mh}{b-m}$ : les prédateurs s'éteignent et les proies convergent vers $K$, l'équilibre d'extinction des deux populations est instable.\n\n- si : $\\displaystyle\\frac{mh}{b-m} <K< h+\\frac{2mh}{b-m}$ : proies et prédateurs co-existent à un équilibre globalement asymptotiquement stable, l'équilibre d'extinction des prédateurs est instable, l'équilibre d'extinction des deux populations est instable.\n\n- si : $h+\\displaystyle\\frac{2mh}{b-m}<K$: proies et prédateurs co-existent le long d'un cycle limite globalement asymptotiquement stable, l'équilibre d'extinction des prédateurs est instable, l'équilibre d'extinction des deux populations est instable.\n\n\nDans un premier temps nous allons calculer et représenter les différents équilibres et leur stabilité dans le plan $(K, y)$, puis nous calculerons et rajouterons une représentation du cycle limite.\n\n#### Equilibres\n\nNous faisons une boucle sur les valeurs de $K$ et calculons les équilibres.\n\n::: {.cell execution_count=8}\n``` {.julia .cell-code}\nK_step = 0.1\n\n# before transcritical\nK_plot1 = 0: K_step: m*h/(b-m)\ny_eq01 = ones(length(K_plot1)).*0\n\n# between transcritical and Hopf\nK_plot2 = m*h/(b-m): K_step: h+2*m*h/(b-m)\ny_eq02 = ones(length(K_plot2)).*0\ny_co2 = [r/c*(h+m*h/(b-m))*(1-m*h/(b-m)/K_p) for K_p in K_plot2]  # may have broadcasted\n\n# above Hopf\nK_plot3 = h+2*m*h/(b-m)-K_step/5: (K_step/10) :8\ny_eq03 = ones(length(K_plot3)).*0\ny_co3 = [r/c*(h+m*h/(b-m))*(1-m*h/(b-m)/K_p) for K_p in K_plot3]; # may have broadcasted\n```\n:::\n\n\nEt nous commençons le tracé de la figure :\n\n::: {.cell execution_count=9}\n``` {.julia .cell-code code-fold=\"true\"}\nfig3 = Figure(backgroundcolor = :transparent,\n              resolution = (600,400),   # size\n              fontsize = 18)  \n\n# on crée un système d'axes en position [1,1] dans la figure\nax31 = Axis(fig3[1,1],\n           xlabel = L\"$K$\",\n           ylabel = L\"densité de population $y^*$\",\n           title = \"Bifurcations pour le modèle de Rosenzweig MacArthur\")\n\n# on trace la population x \n# left of transcritical\nlines!(ax31, K_plot1, y_eq01,\n       color = Cycled(1),\n       linewidth = 2,\n       label = L\"branche stable\")\n\n# between transcritical and Hopf\nlines!(ax31, K_plot2, y_eq02,\n       color = Cycled(2),\n       linewidth = 2,\n       label = \"branche instable\")\n\nlines!(ax31, K_plot2, y_co2,\n       color = Cycled(1),\n       linewidth = 2)\n\n# right of Hopf\nlines!(ax31, K_plot3, y_eq03,\n       color = Cycled(2),\n       linewidth = 2)\n\nlines!(ax31, K_plot3, y_co3,\n       color = Cycled(2),\n       linewidth = 2)\n\nfig3\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n![](pop_interactions2_files/figure-html/cell-9-output-1.svg){}\n:::\n:::\n\n\n",
    "supporting": [
      "pop_interactions2_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}