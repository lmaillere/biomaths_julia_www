{
  "hash": "0a0bdb00e3e62a48297201d7a72c1279",
  "result": {
    "markdown": "---\ntitle: \"Populations en interaction (2)\"\n---\n\n## Le modèle de Rosenzweig MacArthur {#sec-rma}\n\nNous considérons le modèle de dynamique de populations attribué à Rosenzweig et MacArthur (voir @Rosenzweig1963, @Turchin2003, @Smith2008).\n\n$$\n\\left\\{\\begin{array}{l}\n\\dot x = \\displaystyle rx\\left(1-\\frac{x}{K}\\right) - c \\frac{x}{h+x} y\\\\[.3cm]\n\\dot y = b\\displaystyle \\frac{x}{h+x} y - m y\n\\end{array}\\right.\n$$ {#eq-rma}\n\n### Dynamiques et plan de phase\n\nIl n'y a pas de difficulté particulière à la simulation par rapport au modèle de Lotka Volterra. \n\n::: {.cell execution_count=1}\n``` {.julia .cell-code code-fold=\"true\"}\nusing DifferentialEquations, DataFrames\n\n# conditions initiales\nx0 = 1.0\ny0 = 1.95\netat0 = [x0, y0]\n\n# paramètres\nr = 1.0\nK = 10.0 \nc = 1.0\nh = 2.0\nb = 2.0\nm = 1.0\n\npar_rma = [r, K, c, h, b, m]\n\n# temps d'integration \ntspan = (0.0, 60.0)\ntstep = .01\n\n# définition du modèle\nfunction rma(u, par, t)\n    r, K, c, h, b, m = par\n    x = u[1]\n    y = u[2]\n\n    dx = r*x*(1-x/K) - c*x/(h+x)*y\n    dy = b*x/(h+x)*y - m*y\n    \n    [dx, dy]\nend\n\n# problème\nprob_rma = ODEProblem(rma, etat0, tspan, par_rma, saveat = tstep)\n# intégration\nsol_rma = solve(prob_rma, reltol = 1e-6)\n# dataframe\nsol_rma = DataFrame(sol_rma)\nrename!(sol_rma, :timestamp => :time, :value1 => :x, :value2 => :y)\n```\n:::\n\n\nNous utiliserons ici le package de visualisation graphique `Makie.jl`^[entièrement écrit en `Julia`, présenté comme \"[le futur](https://medium.com/coffee-in-a-klein-bottle/visualizing-data-with-julia-using-makie-7685d7850f06)\". Une bonne [introduction à Makie](https://juliadatascience.io/DataVisualizationMakie).] à la place de `Plots.jl`. `Makie.jl` permet un contrôle très approfondi du graphiqe. Commençons par tracer les dynamiques contre le temps dans une figure simple.\n\nNous utiliserons le backend `CairoMakie` pour la visualisation en 2D. \n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\nusing CairoMakie\n```\n:::\n\n\nUn peu comme `Matplotlib` en `Python`, `Makie` définit un triplet `FigureAxisPlot` : la figure est le conteneur de (éventuellement) plusieurs systèmes d'axes qui contiennent chacun un ou plusieurs graphique. \n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\n# on crée la figure\nfig1 = Figure(backgroundcolor = :transparent,\n              resolution = (600,400),\n              fontsize = 18)  # size\n\n# on crée un système d'axes en position [1,1] dans la figure\nax1 = Axis(fig1[1,1],\n           xlabel = \"temps\",\n           ylabel = \"densités de populations\",\n           title = \"Modèle de Rosenzweig MacArthur\")\n\n# on trace la population x contre le temps sur le système d'axe ax1\nlines!(ax1, sol_rma.time, sol_rma.x,\n       linewidth = 2,\n       linestyle = :solid,\n       label = L\"x(t)\")\n\n# population y\nlines!(ax1, sol_rma.time, sol_rma.y,\n       linewidth = 2,\n       linestyle = :solid,\n       label = L\"y(t)\")\n\n# légende\naxislegend(position = :lt)\n\n# on affiche la figure\nfig1\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n![](pop_interactions2_files/figure-html/cell-4-output-1.svg){}\n:::\n:::\n\n\n",
    "supporting": [
      "pop_interactions2_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}