{
  "hash": "f6929db199fbe4d650f08955fb70d192",
  "result": {
    "markdown": "---\ntitle: \"Présentation\"\n---\n\n\\\n\nCes pages proposent une introduction à la simulation d'équations différentielles avec `Julia`, centrée sur la simulation de modèles classiques en dynamique des populations.\n\nLe document est structuré comme suit :\n\n- La section sur les [populations isolées](pop_isolees.qmd) introduit les bases en dimension 1 (modèle de Malthus, modèle logistique et effets Allee)\n\n- la section sur les [populations exploitées](pop_exploitees.qmd) introduit les diagrammes de bifurcations (prélèvements et effets Allee, interactions insectes-oiseaux)\n\n- la section sur les [populations en interaction](pop_interactions.qmd) introduit la dimension 2, notamment via les représentations dans l'espace d'état, et traite des interactions entre populations sous l'angle des modèles proies-prédateurs (modèle de Lotka Volterra et [modèle de Rosenzweig MacArthur](pop_interactions2.qmd))\n\nLe site contient aussi du matétiel supplémentaire pour compléments plus avancés pour :\n\n- [tracer](annexe_LV_makieplot.qmd) une jolie figure pour Lotka Volterra avec `Makie.jl`\n\n- [utiliser](annexe_integrator.qmd) l'interface `integrator` de `DifferentialEquations.jl` ou la redéfinition de problèmes d'intégration via `remake` \n\n- [simuler](annexe_FisherKPP.qmd) une équation de réaction-diffusion en une dimension : le modèle de Fisher-KPP **PRECISIONS**\n\n\n## Installation de Julia\n\nLa façon la plus simple d'installer `Julia` est d'utiliser [juliaup](https://github.com/JuliaLang/juliaup).\n\nSur Linux :\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\ncurl -fsSL https://install.julialang.org | sh\n```\n:::\n\n\net procéder à l'installation.\n\nPuis installer le package `IJulia` si vous souhaitez utiliser `Julia` dans un notebook `jupyter`:\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\njulia\njulia> ]  # package mode\n(@v1.9) pkg> add IJulia \n```\n:::\n\n\nSi vous avez déjà `jupyterlab` installé, un noyau `Julia` est ensuite disponible. Sinon :\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\njulia> using IJulia # hit backspace first to exit package mode\njulia> jupyterlab()\n```\n:::\n\n\nvous permettra d'installer (via une installation de miniconda) et de démarrer `jupyterlab`. \n\n`Julia` a aussi un système de notebook propre `Pluto.jl`:\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\njulia> ]   # package mode\n(@v1.9) pkg> add Pluto\njulia> using Pluto  # hit backspace first to exit package mode\n```\n:::\n\n\nUne extension `Julia` est disponible pour VScode/VScodium.\n\n[Allons-y !](pop_isolees.qmd)\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}