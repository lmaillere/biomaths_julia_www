{
  "hash": "3d6ecaa13c64ba7903e0df19ac6b7d13",
  "result": {
    "markdown": "---\ntitle: \"Introduction\"\n---\n\n\\\n\nCes pages proposent une introduction à la simulation d'équations différentielles avec `Julia`, centrée sur la simulation de modèles classiques en dynamique des populations.\n\nCes pages sont structurées comme suit :\n\n- la section sur les [populations isolées](pop_isolees.qmd) introduit les bases en dimension 1 (modèle de Malthus, modèle logistique et effets Allee)\n\n- la section sur les [populations exploitées](pop_exploitees.qmd) introduit les diagrammes de bifurcations (prélèvements et effets Allee, interactions insectes-oiseaux)\n\n- la section sur les [populations en interaction](pop_interactions.qmd) introduit la dimension 2, notamment via les représentations dans l'espace d'état, et traite des interactions entre populations sous l'angle des modèles proies-prédateurs (modèle de Lotka Volterra et [modèle de Rosenzweig MacArthur](pop_interactions2.qmd))\n\nLe site contient aussi du [matétiel supplémentaire](annexes.qmd) pour compléments plus avancés (graphiques, methodes d'intégration alternatives, équations de réaction-diffusion).\n\n## Installation de Julia\n\nLa façon la plus simple d'installer `Julia` est d'utiliser [juliaup](https://github.com/JuliaLang/juliaup). \n\nSur Linux, installez `curl` sur votre système^[`sudo apt install curl` sur Ubuntu]. Puis dans un terminal :\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\ncurl -fsSL https://install.julialang.org | sh\n```\n:::\n\n\net procédez à l'installation. \n\nFermez et réouvrez votre terminal (ou rechargez votre fichier de préférences comme vous l'indique l'installateur de juliaup) pour pouvoir exécuter `Julia`.\n\nPuis, si vous souhaitez utiliser `Julia` dans un notebook `jupyter`, installez le package `IJulia` depuis Julia comme suit^[le profil utilisé doit semble-t-il être administrateur, et si il est tout nouvellement créé un redémarrage peut s'avérer nécessaire si vous rencontrez une erreur à l'exécution de `jupyterlab()` ci-dessous]:\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\njulia # executer julia dans un terminal\n   _       _ _(_)_     |  Documentation: https://docs.julialang.org\n  (_)     | (_) (_)    |\n   _ _   _| |_  __ _   |  Type \"?\" for help, \"]?\" for Pkg help.\n  | | | | | | |/ _` |  |\n  | | |_| | | | (_| |  |  Version 1.9.4 (2023-11-14)\n _/ |\\__'_|_|_|\\__'_|  |  Official https://julialang.org/ release\n|__/                   |\n\njulia> ]  # package mode\n(@v1.9) pkg> add IJulia \n```\n:::\n\n\nSi vous avez déjà `jupyterlab` installé, un noyau `Julia` est ensuite disponible. Sinon vous pouvez l'installer et le démarrer directement depuis Julia :\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\njulia> using IJulia # tapez backspace d'abord \n                    # pour sortir du package mode\njulia> jupyterlab()\n```\n:::\n\n\n\\\n\n`Julia` a aussi un système de notebook propre `Pluto.jl`:\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\njulia> ]   # package mode\n(@v1.9) pkg> add Pluto\njulia> using Pluto  # hit backspace first to exit package mode\n```\n:::\n\n\n\\\n\nEnfin, une [extension `Julia`](https://www.julia-vscode.org/docs/stable/setup/) est disponible pour VScode/VScodium, un environnement de développement que je vous conseille.\n\n[Allons-y !](pop_isolees.qmd)\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}